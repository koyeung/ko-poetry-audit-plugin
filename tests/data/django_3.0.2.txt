{"info":{"author":"Django Software Foundation","author_email":"foundation@djangoproject.com","bugtrack_url":null,"classifiers":["Development Status :: 5 - Production/Stable","Environment :: Web Environment","Framework :: Django","Intended Audience :: Developers","License :: OSI Approved :: BSD License","Operating System :: OS Independent","Programming Language :: Python","Programming Language :: Python :: 3","Programming Language :: Python :: 3 :: Only","Programming Language :: Python :: 3.6","Programming Language :: Python :: 3.7","Programming Language :: Python :: 3.8","Topic :: Internet :: WWW/HTTP","Topic :: Internet :: WWW/HTTP :: Dynamic Content","Topic :: Internet :: WWW/HTTP :: WSGI","Topic :: Software Development :: Libraries :: Application Frameworks","Topic :: Software Development :: Libraries :: Python Modules"],"description":"======\nDjango\n======\n\nDjango is a high-level Python Web framework that encourages rapid development\nand clean, pragmatic design. Thanks for checking it out.\n\nAll documentation is in the \"``docs``\" directory and online at\nhttps://docs.djangoproject.com/en/stable/. If you're just getting started,\nhere's how we recommend you read the docs:\n\n* First, read ``docs/intro/install.txt`` for instructions on installing Django.\n\n* Next, work through the tutorials in order (``docs/intro/tutorial01.txt``,\n  ``docs/intro/tutorial02.txt``, etc.).\n\n* If you want to set up an actual deployment server, read\n  ``docs/howto/deployment/index.txt`` for instructions.\n\n* You'll probably want to read through the topical guides (in ``docs/topics``)\n  next; from there you can jump to the HOWTOs (in ``docs/howto``) for specific\n  problems, and check out the reference (``docs/ref``) for gory details.\n\n* See ``docs/README`` for instructions on building an HTML version of the docs.\n\nDocs are updated rigorously. If you find any problems in the docs, or think\nthey should be clarified in any way, please take 30 seconds to fill out a\nticket here: https://code.djangoproject.com/newticket\n\nTo get more help:\n\n* Join the ``#django`` channel on irc.freenode.net. Lots of helpful people hang\n  out there. See https://en.wikipedia.org/wiki/Wikipedia:IRC/Tutorial if you're\n  new to IRC.\n\n* Join the django-users mailing list, or read the archives, at\n  https://groups.google.com/group/django-users.\n\nTo contribute to Django:\n\n* Check out https://docs.djangoproject.com/en/dev/internals/contributing/ for\n  information about getting involved.\n\nTo run Django's test suite:\n\n* Follow the instructions in the \"Unit tests\" section of\n  ``docs/internals/contributing/writing-code/unit-tests.txt``, published online at\n  https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/unit-tests/#running-the-unit-tests\n\n\n","description_content_type":"","docs_url":null,"download_url":"","downloads":{"last_day":-1,"last_month":-1,"last_week":-1},"home_page":"https://www.djangoproject.com/","keywords":"","license":"BSD","maintainer":"","maintainer_email":"","name":"Django","package_url":"https://pypi.org/project/Django/","platform":"","project_url":"https://pypi.org/project/Django/","project_urls":{"Documentation":"https://docs.djangoproject.com/","Funding":"https://www.djangoproject.com/fundraising/","Homepage":"https://www.djangoproject.com/","Source":"https://github.com/django/django","Tracker":"https://code.djangoproject.com/"},"release_url":"https://pypi.org/project/Django/3.0.2/","requires_dist":["pytz","sqlparse (>=0.2.2)","asgiref (~=3.2)","argon2-cffi (>=16.1.0) ; extra == 'argon2'","bcrypt ; extra == 'bcrypt'"],"requires_python":">=3.6","summary":"A high-level Python Web framework that encourages rapid development and clean, pragmatic design.","version":"3.0.2","yanked":false,"yanked_reason":null},"last_serial":15606688,"urls":[{"comment_text":"","digests":{"md5":"219b8ac5c00c9e0f608bc5b748cd378e","sha256":"4f2c913303be4f874015993420bf0bd8fd2097a9c88e6b49c6a92f9bdd3fb13a"},"downloads":-1,"filename":"Django-3.0.2-py3-none-any.whl","has_sig":true,"md5_digest":"219b8ac5c00c9e0f608bc5b748cd378e","packagetype":"bdist_wheel","python_version":"py3","requires_python":">=3.6","size":7428596,"upload_time":"2020-01-02T07:22:14","upload_time_iso_8601":"2020-01-02T07:22:14.549127Z","url":"https://files.pythonhosted.org/packages/55/d1/8ade70e65fa157e1903fe4078305ca53b6819ab212d9fbbe5755afc8ea2e/Django-3.0.2-py3-none-any.whl","yanked":false,"yanked_reason":null},{"comment_text":"","digests":{"md5":"24d5364af6b04c4dd173111a3207459a","sha256":"8c3575f81e11390893860d97e1e0154c47512f180ea55bd84ce8fa69ba8051ca"},"downloads":-1,"filename":"Django-3.0.2.tar.gz","has_sig":true,"md5_digest":"24d5364af6b04c4dd173111a3207459a","packagetype":"sdist","python_version":"source","requires_python":">=3.6","size":9028261,"upload_time":"2020-01-02T07:22:21","upload_time_iso_8601":"2020-01-02T07:22:21.750853Z","url":"https://files.pythonhosted.org/packages/c5/c1/5b901e21114b5dd9233726c2975c0aa7e9f48f63e41ec95d8777721d8aff/Django-3.0.2.tar.gz","yanked":false,"yanked_reason":null}],"vulnerabilities":[{"aliases":["CVE-2021-3281"],"details":"In Django 2.2 before 2.2.18, 3.0 before 3.0.12, and 3.1 before 3.1.6, the django.utils.archive.extract method (used by \"startapp --template\" and \"startproject --template\") allows directory traversal via an archive with absolute paths or relative paths with dot segments.","fixed_in":["2.2.18","3.0.12","3.1.6"],"id":"PYSEC-2021-9","link":"https://osv.dev/vulnerability/PYSEC-2021-9","source":"osv","summary":null,"withdrawn":null},{"aliases":["CVE-2020-24583"],"details":"An issue was discovered in Django 2.2 before 2.2.16, 3.0 before 3.0.10, and 3.1 before 3.1.1 (when Python 3.7+ is used). FILE_UPLOAD_DIRECTORY_PERMISSIONS mode was not applied to intermediate-level directories created in the process of uploading files. It was also not applied to intermediate-level collected static directories when using the collectstatic management command.","fixed_in":["2.2.16","3.0.10","3.1.1"],"id":"PYSEC-2020-33","link":"https://osv.dev/vulnerability/PYSEC-2020-33","source":"osv","summary":null,"withdrawn":null},{"aliases":["CVE-2020-13254"],"details":"An issue was discovered in Django 2.2 before 2.2.13 and 3.0 before 3.0.7. In cases where a memcached backend does not perform key validation, passing malformed cache keys could result in a key collision, and potential data leakage.","fixed_in":["2.2.13","3.0.7"],"id":"PYSEC-2020-31","link":"https://osv.dev/vulnerability/PYSEC-2020-31","source":"osv","summary":null,"withdrawn":null},{"aliases":["CVE-2020-9402"],"details":"Django 1.11 before 1.11.29, 2.2 before 2.2.11, and 3.0 before 3.0.4 allows SQL Injection if untrusted data is used as a tolerance parameter in GIS functions and aggregates on Oracle. By passing a suitably crafted tolerance to GIS functions and aggregates on Oracle, it was possible to break escaping and inject malicious SQL.","fixed_in":["1.11.29","2.2.11","3.0.4"],"id":"PYSEC-2020-36","link":"https://osv.dev/vulnerability/PYSEC-2020-36","source":"osv","summary":null,"withdrawn":null},{"aliases":["CVE-2021-33203"],"details":"Django before 2.2.24, 3.x before 3.1.12, and 3.2.x before 3.2.4 has a potential directory traversal via django.contrib.admindocs. Staff members could use the TemplateDetailView view to check the existence of arbitrary files. Additionally, if (and only if) the default admindocs templates have been customized by application developers to also show file contents, then not only the existence but also the file contents would have been exposed. In other words, there is directory traversal outside of the template root directories.","fixed_in":["2.2.24","3.1.12","3.2.4"],"id":"PYSEC-2021-98","link":"https://osv.dev/vulnerability/PYSEC-2021-98","source":"osv","summary":null,"withdrawn":null},{"aliases":["CVE-2021-28658"],"details":"In Django 2.2 before 2.2.20, 3.0 before 3.0.14, and 3.1 before 3.1.8, MultiPartParser allowed directory traversal via uploaded files with suitably crafted file names. Built-in upload handlers were not affected by this vulnerability.","fixed_in":["2.2.20","3.0.14","3.1.8"],"id":"PYSEC-2021-6","link":"https://osv.dev/vulnerability/PYSEC-2021-6","source":"osv","summary":null,"withdrawn":null},{"aliases":["CVE-2021-33571"],"details":"In Django 2.2 before 2.2.24, 3.x before 3.1.12, and 3.2 before 3.2.4, URLValidator, validate_ipv4_address, and validate_ipv46_address do not prohibit leading zero characters in octal literals. This may allow a bypass of access control that is based on IP addresses. (validate_ipv4_address and validate_ipv46_address are unaffected with Python 3.9.5+..) .","fixed_in":["2.2.24","3.1.12","3.2.4"],"id":"PYSEC-2021-99","link":"https://osv.dev/vulnerability/PYSEC-2021-99","source":"osv","summary":null,"withdrawn":null},{"aliases":["CVE-2020-7471"],"details":"Django 1.11 before 1.11.28, 2.2 before 2.2.10, and 3.0 before 3.0.3 allows SQL Injection if untrusted data is used as a StringAgg delimiter (e.g., in Django applications that offer downloads of data as a series of rows with a user-specified column delimiter). By passing a suitably crafted delimiter to a contrib.postgres.aggregates.StringAgg instance, it was possible to break escaping and inject malicious SQL.","fixed_in":["1.11.28","2.2.10","3.0.3"],"id":"PYSEC-2020-35","link":"https://osv.dev/vulnerability/PYSEC-2020-35","source":"osv","summary":null,"withdrawn":null},{"aliases":["CVE-2020-24584"],"details":"An issue was discovered in Django 2.2 before 2.2.16, 3.0 before 3.0.10, and 3.1 before 3.1.1 (when Python 3.7+ is used). The intermediate-level directories of the filesystem cache had the system's standard umask rather than 0o077.","fixed_in":["2.2.16","3.0.10","3.1.1"],"id":"PYSEC-2020-34","link":"https://osv.dev/vulnerability/PYSEC-2020-34","source":"osv","summary":null,"withdrawn":null},{"aliases":["CVE-2020-13596"],"details":"An issue was discovered in Django 2.2 before 2.2.13 and 3.0 before 3.0.7. Query parameters generated by the Django admin ForeignKeyRawIdWidget were not properly URL encoded, leading to a possibility of an XSS attack.","fixed_in":["2.2.13","3.0.7"],"id":"PYSEC-2020-32","link":"https://osv.dev/vulnerability/PYSEC-2020-32","source":"osv","summary":null,"withdrawn":null},{"aliases":["CVE-2020-13254"],"details":"An issue was discovered in Django 2.2 before 2.2.13 and 3.0 before 3.0.7. In cases where a memcached backend does not perform key validation, passing malformed cache keys could result in a key collision, and potential data leakage.","fixed_in":["2.2.13","3.0.7"],"id":"GHSA-wpjr-j57x-wxfw","link":"https://osv.dev/vulnerability/GHSA-wpjr-j57x-wxfw","source":"osv","summary":null,"withdrawn":null},{"aliases":["CVE-2021-33203"],"details":"Django before 2.2.24, 3.x before 3.1.12, and 3.2.x before 3.2.4 has a potential directory traversal via django.contrib.admindocs. Staff members could use the TemplateDetailView view to check the existence of arbitrary files. Additionally, if (and only if) the default admindocs templates have been customized by application developers to also show file contents, then not only the existence but also the file contents would have been exposed. In other words, there is directory traversal outside of the template root directories.","fixed_in":["2.2.24","3.1.12","3.2.4"],"id":"GHSA-68w8-qjq3-2gfm","link":"https://osv.dev/vulnerability/GHSA-68w8-qjq3-2gfm","source":"osv","summary":null,"withdrawn":null},{"aliases":["CVE-2021-28658"],"details":"In Django 2.2 before 2.2.20, 3.0 before 3.0.14, and 3.1 before 3.1.8, MultiPartParser allowed directory traversal via uploaded files with suitably crafted file names. Built-in upload handlers were not affected by this vulnerability.","fixed_in":["2.2.20","3.0.14","3.1.8"],"id":"GHSA-xgxc-v2qg-chmh","link":"https://osv.dev/vulnerability/GHSA-xgxc-v2qg-chmh","source":"osv","summary":null,"withdrawn":null},{"aliases":["CVE-2020-24584"],"details":"An issue was discovered in Django 2.2 before 2.2.16, 3.0 before 3.0.10, and 3.1 before 3.1.1 (when Python 3.7+ is used). The intermediate-level directories of the filesystem cache had the system's standard umask rather than 0o077.","fixed_in":["2.2.16","3.0.10","3.1.1"],"id":"GHSA-fr28-569j-53c4","link":"https://osv.dev/vulnerability/GHSA-fr28-569j-53c4","source":"osv","summary":null,"withdrawn":null},{"aliases":["CVE-2020-9402"],"details":"Django 1.11 before 1.11.29, 2.2 before 2.2.11, and 3.0 before 3.0.4 allows SQL Injection if untrusted data is used as a tolerance parameter in GIS functions and aggregates on Oracle. By passing a suitably crafted tolerance to GIS functions and aggregates on Oracle, it was possible to break escaping and inject malicious SQL.","fixed_in":["1.11.29","2.2.11","3.0.4"],"id":"GHSA-3gh2-xw74-jmcw","link":"https://osv.dev/vulnerability/GHSA-3gh2-xw74-jmcw","source":"osv","summary":null,"withdrawn":null},{"aliases":["CVE-2021-44420"],"details":"In Django 2.2 before 2.2.25, 3.1 before 3.1.14, and 3.2 before 3.2.10, HTTP requests for URLs with trailing newlines could bypass upstream access control based on URL paths. This issue has low severity, according to the Django security policy.","fixed_in":["2.2.25","3.1.14","3.2.10"],"id":"GHSA-v6rh-hp5x-86rv","link":"https://osv.dev/vulnerability/GHSA-v6rh-hp5x-86rv","source":"osv","summary":null,"withdrawn":null},{"aliases":["CVE-2021-31542"],"details":"In Django 2.2 before 2.2.21, 3.1 before 3.1.9, and 3.2 before 3.2.1, MultiPartParser, UploadedFile, and FieldFile allowed directory traversal via uploaded files with suitably crafted file names.","fixed_in":["2.2.21","3.1.9","3.2.1"],"id":"GHSA-rxjp-mfm9-w4wr","link":"https://osv.dev/vulnerability/GHSA-rxjp-mfm9-w4wr","source":"osv","summary":null,"withdrawn":null},{"aliases":["CVE-2021-3281"],"details":"In Django 2.2 before 2.2.18, 3.0 before 3.0.12, and 3.1 before 3.1.6, the django.utils.archive.extract method (used by \"startapp --template\" and \"startproject --template\") allows directory traversal via an archive with absolute paths or relative paths with dot segments.","fixed_in":["2.2.18","3.1.6","3.0.12"],"id":"GHSA-fvgf-6h6h-3322","link":"https://osv.dev/vulnerability/GHSA-fvgf-6h6h-3322","source":"osv","summary":null,"withdrawn":null},{"aliases":["CVE-2020-7471"],"details":"Django 1.11 before 1.11.28, 2.2 before 2.2.10, and 3.0 before 3.0.3 allows SQL Injection if untrusted data is used as a StringAgg delimiter (e.g., in Django applications that offer downloads of data as a series of rows with a user-specified column delimiter). By passing a suitably crafted delimiter to a contrib.postgres.aggregates.StringAgg instance, it was possible to break escaping and inject malicious SQL.","fixed_in":["1.11.28","2.2.10","3.0.3"],"id":"GHSA-hmr4-m2h5-33qx","link":"https://osv.dev/vulnerability/GHSA-hmr4-m2h5-33qx","source":"osv","summary":null,"withdrawn":null},{"aliases":["CVE-2021-35042"],"details":"Django 3.1.x before 3.1.13 and 3.2.x before 3.2.5 allows QuerySet.order_by SQL injection if order_by is untrusted input from a client of a web application.","fixed_in":["3.2.5","3.1.13"],"id":"GHSA-xpfp-f569-q3p2","link":"https://osv.dev/vulnerability/GHSA-xpfp-f569-q3p2","source":"osv","summary":null,"withdrawn":null},{"aliases":["CVE-2020-24583"],"details":"An issue was discovered in Django 2.2 before 2.2.16, 3.0 before 3.0.10, and 3.1 before 3.1.1 (when Python 3.7+ is used). FILE_UPLOAD_DIRECTORY_PERMISSIONS mode was not applied to intermediate-level directories created in the process of uploading files. It was also not applied to intermediate-level collected static directories when using the collectstatic management command.","fixed_in":["2.2.16","3.0.10","3.1.1"],"id":"GHSA-m6gj-h9gm-gw44","link":"https://osv.dev/vulnerability/GHSA-m6gj-h9gm-gw44","source":"osv","summary":null,"withdrawn":null},{"aliases":["CVE-2021-33571"],"details":"In Django 2.2 before 2.2.24, 3.x before 3.1.12, and 3.2 before 3.2.4, URLValidator, validate_ipv4_address, and validate_ipv46_address do not prohibit leading zero characters in octal literals. This may allow a bypass of access control that is based on IP addresses. (validate_ipv4_address and validate_ipv46_address are unaffected with Python 3.9.5+..) .","fixed_in":["2.2.24","3.1.12","3.2.4"],"id":"GHSA-p99v-5w3c-jqq9","link":"https://osv.dev/vulnerability/GHSA-p99v-5w3c-jqq9","source":"osv","summary":null,"withdrawn":null},{"aliases":["CVE-2020-13596"],"details":"An issue was discovered in Django 2.2 before 2.2.13 and 3.0 before 3.0.7. Query parameters generated by the Django admin ForeignKeyRawIdWidget were not properly URL encoded, leading to a possibility of an XSS attack.","fixed_in":["2.2.13","3.0.7"],"id":"GHSA-2m34-jcjv-45xf","link":"https://osv.dev/vulnerability/GHSA-2m34-jcjv-45xf","source":"osv","summary":null,"withdrawn":null}]}
